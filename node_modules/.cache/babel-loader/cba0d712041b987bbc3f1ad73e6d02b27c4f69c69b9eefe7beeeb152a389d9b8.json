{"ast":null,"code":"var _jsxFileName = \"/Users/josephlarrivy/software-engineering/other-projects/test/front-end/src/components/snake-game/SnakeGame.js\",\n  _s = $RefreshSig$();\nimport './SnakeGame.css';\nimport React, { useEffect, useRef, useState } from 'react';\nimport './snakeStyles.css';\nimport initialTable from \"./data\";\nimport Board from './Board';\nimport useRunAlgorithm from './hooks/useRunAlgorithm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SnakeGame(_ref) {\n  _s();\n  let {\n    setShowProject\n  } = _ref;\n  const [table, setTable] = useState(initialTable);\n  const [snakeBody, setSnakeBody] = useState([[15, 8], [16, 8], [17, 8], [18, 8]]);\n  const [run] = useRunAlgorithm();\n  const [direction, setDirection] = useState('up');\n  const directionRef = useRef(direction);\n  directionRef.current = direction;\n  const [apple, setApple] = useState([2, 2]);\n  const appleRef = useRef(apple);\n  appleRef.current = apple;\n  useEffect(() => {\n    const timer = setInterval(() => {\n      renderNextFrame();\n    }, 150);\n    return () => clearInterval(timer);\n  }, []);\n  document.onkeydown = checkKey;\n  function checkKey(e) {\n    if (e.keyCode == '38') {\n      setDirection('up');\n    } else if (e.keyCode == '40') {\n      setDirection('down');\n    } else if (e.keyCode == '37') {\n      setDirection('left');\n    } else if (e.keyCode == '39') {\n      setDirection('right');\n    }\n  }\n  const moveApple = newBody => {\n    const generateCoordinates = () => {\n      let randi = Math.floor(Math.random() * 20) + 1;\n      let randk = Math.floor(Math.random() * 20) + 1;\n      let snakeBodyString = JSON.stringify(newBody);\n      if (snakeBodyString.includes([randi, randk])) {\n        return generateCoordinates();\n      }\n      return [randi, randk];\n    };\n    let newApple = generateCoordinates();\n    return newApple;\n  };\n  const renderNextFrame = () => {\n    let data = run(snakeBody, directionRef.current, appleRef.current);\n    let newTable = data[0];\n    let newBody = data[1];\n    setTable(newTable);\n    setSnakeBody(newBody);\n    if (newBody === 0) {\n      setShowProject('snakeGameOver');\n    }\n    if (JSON.stringify(newBody[1]) == JSON.stringify(appleRef.current)) {\n      let newApple = moveApple(newBody);\n      setApple(newApple);\n    }\n  };\n  const exit = () => {\n    setShowProject('list');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: exit,\n      children: /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Exit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 30\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      table: table,\n      setShowProject: setShowProject\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(SnakeGame, \"2srHQ/sUjab6AkJMDg4MlW007gc=\", false, function () {\n  return [useRunAlgorithm];\n});\n_c = SnakeGame;\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["React","useEffect","useRef","useState","initialTable","Board","useRunAlgorithm","jsxDEV","_jsxDEV","SnakeGame","_ref","_s","setShowProject","table","setTable","snakeBody","setSnakeBody","run","direction","setDirection","directionRef","current","apple","setApple","appleRef","timer","setInterval","renderNextFrame","clearInterval","document","onkeydown","checkKey","e","keyCode","moveApple","newBody","generateCoordinates","randi","Math","floor","random","randk","snakeBodyString","JSON","stringify","includes","newApple","data","newTable","exit","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/josephlarrivy/software-engineering/other-projects/test/front-end/src/components/snake-game/SnakeGame.js"],"sourcesContent":["import './SnakeGame.css';\nimport React, { useEffect, useRef, useState } from 'react';\nimport './snakeStyles.css'\n\nimport initialTable from \"./data\";\nimport Board from './Board';\nimport useRunAlgorithm from './hooks/useRunAlgorithm';\n\nfunction SnakeGame({ setShowProject }) {\n\n  const [table, setTable] = useState(initialTable);\n  const [snakeBody, setSnakeBody] = useState([[15, 8], [16, 8], [17, 8], [18, 8]])\n  const [run] = useRunAlgorithm();\n\n  const [direction, setDirection] = useState('up')\n  const directionRef = useRef(direction)\n  directionRef.current = direction;\n\n  const [apple, setApple] = useState([2, 2])\n  const appleRef = useRef(apple)\n  appleRef.current = apple;\n\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      renderNextFrame()\n    }, 150);\n    return () => clearInterval(timer)\n  }, [])\n\n\n  document.onkeydown = checkKey;\n  function checkKey(e) {\n    if (e.keyCode == '38') {\n      setDirection('up')\n    } else if (e.keyCode == '40') {\n      setDirection('down')\n    } else if (e.keyCode == '37') {\n      setDirection('left')\n    } else if (e.keyCode == '39') {\n      setDirection('right')\n    }\n  }\n\n  \n  const moveApple = (newBody) => {\n    const generateCoordinates = () => {\n      let randi = (Math.floor(Math.random() * 20) + 1)\n      let randk = (Math.floor(Math.random() * 20) + 1)\n      \n      let snakeBodyString = JSON.stringify(newBody)\n\n      if (snakeBodyString.includes([randi, randk])) {\n        return generateCoordinates()\n      }\n\n      return ([randi, randk])\n    }\n    \n    let newApple = generateCoordinates()\n    \n    return newApple\n  }\n  \n\n  const renderNextFrame = () => {\n    let data = run(snakeBody, directionRef.current, appleRef.current)\n    let newTable = data[0]\n    let newBody = data[1]\n    setTable(newTable)\n    setSnakeBody(newBody)\n    if (newBody === 0) {\n      setShowProject('snakeGameOver')\n    }\n    if (JSON.stringify(newBody[1]) == JSON.stringify(appleRef.current)) {\n      let newApple = moveApple(newBody)\n      setApple(newApple)\n    }\n  }\n\n  const exit = () => { setShowProject('list') }\n\n  return (\n    <div className=\"App\">\n      <button onClick={exit}><b>Exit</b></button>\n      <Board table={table} setShowProject={setShowProject}/>\n    </div>\n  );\n  \n\n}\n\nexport default SnakeGame;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}