{"ast":null,"code":"// import React, {useState, useEffect} from \"react\";\n\n// A live cell dies if it has fewer than two live neighbors.\n// A live cell with two or three live neighbors lives on to the next generation.\n// A live cell with more than three live neighbors dies.\n// A dead cell will be brought back to live if it has exactly three live neighbors.\n\nconst useRunAlgorithm = () => {\n  const run = table => {\n    const newTable = JSON.parse(JSON.stringify(table));\n    const evaluateCell = (i, k) => {\n      let sumOfLiveNeighbors = 0;\n      if (table[i - 1][k - 1] == 1) {\n        sumOfLiveNeighbors++;\n      }\n      if (table[i - 1][k] == 1) {\n        sumOfLiveNeighbors++;\n      }\n      if (table[i - 1][k + 1] == 1) {\n        sumOfLiveNeighbors++;\n      }\n      if (table[i][k - 1] == 1) {\n        sumOfLiveNeighbors++;\n      }\n      if (table[i][k + 1] == 1) {\n        sumOfLiveNeighbors++;\n      }\n      if (table[i + 1][k - 1] == 1) {\n        sumOfLiveNeighbors++;\n      }\n      if (table[i + 1][k] == 1) {\n        sumOfLiveNeighbors++;\n      }\n      if (table[i + 1][k + 1] == 1) {\n        sumOfLiveNeighbors++;\n      }\n      return sumOfLiveNeighbors;\n    };\n    const loopTable = table => {\n      for (let i = 1; i < table.length - 1; i++) {\n        for (let k = 1; k < table[0].length - 1; k++) {\n          let value = table[i][k];\n          let sumOfLiveNeighbors = evaluateCell(i, k);\n          if (value == 1 && sumOfLiveNeighbors < 2) {\n            newTable[i][k] = 0;\n          } else if (value == 1 && sumOfLiveNeighbors == 2) {\n            newTable[i][k] = 1;\n          } else if (value == 1 && sumOfLiveNeighbors == 3) {\n            newTable[i][k] = 1;\n          } else if (value == 1 && sumOfLiveNeighbors > 3) {\n            newTable[i][k] = 0;\n          } else if (value == 0 && sumOfLiveNeighbors < 3) {\n            newTable[i][k] = 0;\n          } else if (value == 0 && sumOfLiveNeighbors == 3) {\n            newTable[i][k] = 1;\n          } else if (value == 0 && sumOfLiveNeighbors > 3) {\n            newTable[i][k] = 0;\n          }\n        }\n      }\n      return newTable;\n    };\n    return loopTable(table);\n  };\n  return [run];\n};\nexport default useRunAlgorithm;","map":{"version":3,"names":["useRunAlgorithm","run","table","newTable","JSON","parse","stringify","evaluateCell","i","k","sumOfLiveNeighbors","loopTable","length","value"],"sources":["/Users/josephlarrivy/software-engineering/other-projects/portfolio-heroku-push-ready/front-end/src/components/game-of-life/hooks/useRunAlgorithm.js"],"sourcesContent":["// import React, {useState, useEffect} from \"react\";\n\n\t// A live cell dies if it has fewer than two live neighbors.\n\t// A live cell with two or three live neighbors lives on to the next generation.\n\t// A live cell with more than three live neighbors dies.\n\t// A dead cell will be brought back to live if it has exactly three live neighbors.\n\nconst useRunAlgorithm = () => {\n\n\tconst run = (table) => {\n\n\t\tconst newTable = JSON.parse(JSON.stringify(table))\n\t\t\n\t\tconst evaluateCell = (i, k) => {\n\t\t\tlet sumOfLiveNeighbors = 0;\n\t\t\tif (table[i - 1][k - 1] == 1) {\n\t\t\t\tsumOfLiveNeighbors++;\n\t\t\t}\n\t\t\tif (table[i - 1][k] == 1) {\n\t\t\t\tsumOfLiveNeighbors++;\n\t\t\t}\n\t\t\tif (table[i - 1][k + 1] == 1) {\n\t\t\t\tsumOfLiveNeighbors++;\n\t\t\t}\n\t\t\tif (table[i][k - 1] == 1) {\n\t\t\t\tsumOfLiveNeighbors++\n\t\t\t}\n\t\t\tif (table[i][k + 1] == 1) {\n\t\t\t\tsumOfLiveNeighbors++\n\t\t\t}\n\t\t\tif (table[i + 1][k - 1] == 1) {\n\t\t\t\tsumOfLiveNeighbors++;\n\t\t\t}\n\t\t\tif (table[i + 1][k] == 1) {\n\t\t\t\tsumOfLiveNeighbors++;\n\t\t\t}\n\t\t\tif (table[i + 1][k + 1] == 1) {\n\t\t\t\tsumOfLiveNeighbors++;\n\t\t\t}\n\t\t\treturn sumOfLiveNeighbors;\n\t\t}\n\n\t\tconst loopTable = (table) => {\n\t\t\tfor (let i=1; i<table.length-1; i++) {\n\t\t\t\tfor (let k = 1; k < table[0].length-1; k++) {\n\t\t\t\t\tlet value = table[i][k]\n\t\t\t\t\tlet sumOfLiveNeighbors = evaluateCell(i, k);\n\n\t\t\t\t\tif (value == 1 && sumOfLiveNeighbors < 2) {\n\t\t\t\t\t\tnewTable[i][k] = 0;\n\t\t\t\t\t\t\n\t\t\t\t\t} else if (value == 1 && sumOfLiveNeighbors == 2 ) {\n\t\t\t\t\t\tnewTable[i][k] = 1;\n\t\t\t\t\t\t\n\t\t\t\t\t} else if (value == 1 && sumOfLiveNeighbors == 3) {\n\t\t\t\t\t\tnewTable[i][k] = 1;\n\t\t\t\t\t\t\n\t\t\t\t\t} else if (value == 1 && sumOfLiveNeighbors > 3) {\n\t\t\t\t\t\tnewTable[i][k] = 0;\n\t\t\t\t\t\t\n\t\t\t\t\t} else if (value == 0 && sumOfLiveNeighbors < 3) {\n\t\t\t\t\t\tnewTable[i][k] = 0;\n\t\t\t\t\t\t\n\t\t\t\t\t} else if (value == 0 && sumOfLiveNeighbors == 3) {\n\t\t\t\t\t\tnewTable[i][k] = 1;\n\t\t\t\t\t\t\n\t\t\t\t\t} else if (value == 0 && sumOfLiveNeighbors > 3) {\n\t\t\t\t\t\tnewTable[i][k] = 0;\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn newTable;\n\t\t}\n\t\treturn loopTable(table)\n\t}\n\treturn [run]\n}\n\nexport default useRunAlgorithm;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}