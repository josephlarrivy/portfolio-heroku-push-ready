{"ast":null,"code":"import initialTable from \"../data\";\n// import startTable from \"../startTable\";\n// import SnakeLinkedList from \"../SnakeLinkedList\"\n\nconst useRunAlgorithm = () => {\n  let count = 0;\n  const run = (body, direction, apple) => {\n    const evaluateHeadMove = (snake, direction, apple) => {\n      count += 1;\n      let headi = snake[0][0];\n      let headk = snake[0][1];\n      let headString = JSON.stringify(snake[0]);\n      let appleString = JSON.stringify(apple);\n      let snakeBodyString = JSON.stringify(snake.slice(1));\n      if (count <= 10) {\n        // snake = snake\n      } else if (snakeBodyString.includes(headString)) {\n        snake = 0;\n      } else if (direction === 'up' && headString == appleString) {\n        snake.unshift([headi - 1, headk]);\n      } else if (direction === 'down' && headString == appleString) {\n        snake.unshift([headi + 1, headk]);\n      } else if (direction === 'right' && headString == appleString) {\n        snake.unshift([headi, headk + 1]);\n      } else if (direction === 'left' && headString == appleString) {\n        snake.unshift([headi, headk - 1]);\n      } else if (direction === 'up' && initialTable[headi - 1][headk] === 0) {\n        snake.unshift([headi - 1, headk]);\n        snake.pop();\n      } else if (direction === 'down' && initialTable[headi + 1][headk] === 0) {\n        snake.unshift([headi + 1, headk]);\n        snake.pop();\n      } else if (direction === 'right' && initialTable[headi][headk + 1] === 0) {\n        snake.unshift([headi, headk + 1]);\n        snake.pop();\n      } else if (direction === 'left' && initialTable[headi][headk - 1] === 0) {\n        snake.unshift([headi, headk - 1]);\n        snake.pop();\n      } else if (direction === 'up' && initialTable[headi - 1][headk] === 2) {\n        snake = 0;\n      } else if (direction === 'down' && initialTable[headi + 1][headk] === 2) {\n        snake = 0;\n      } else if (direction === 'right' && initialTable[headi][headk + 1] === 2) {\n        snake = 0;\n      } else if (direction === 'left' && initialTable[headi][headk - 1] === 2) {\n        snake = 0;\n      }\n      return snake;\n    };\n    const renderSnake = (body, direction, table, apple) => {\n      let newTable = JSON.parse(JSON.stringify(table));\n      let bodyToRender = evaluateHeadMove(body, direction, apple);\n      if (count <= 10) {\n        newTable = initialTable;\n      } else if (bodyToRender == 0) {\n        bodyToRender = 0;\n      } else {\n        for (let coordinates of bodyToRender) {\n          let [i, k] = coordinates;\n          newTable[i][k] = 1;\n        }\n        let [i, k] = apple;\n        newTable[i][k] = 3;\n      }\n      return [newTable, bodyToRender];\n    };\n    return renderSnake(body, direction, initialTable, apple);\n  };\n  return [run];\n};\nexport default useRunAlgorithm;","map":{"version":3,"names":["initialTable","useRunAlgorithm","count","run","body","direction","apple","evaluateHeadMove","snake","headi","headk","headString","JSON","stringify","appleString","snakeBodyString","slice","includes","unshift","pop","renderSnake","table","newTable","parse","bodyToRender","coordinates","i","k"],"sources":["/Users/josephlarrivy/software-engineering/other-projects/test/front-end/src/components/snake-game/hooks/useRunAlgorithm.js"],"sourcesContent":["import initialTable from \"../data\"\n// import startTable from \"../startTable\";\n// import SnakeLinkedList from \"../SnakeLinkedList\"\n\n\n\nconst useRunAlgorithm = () => {\n  \n  let count = 0;\n\n\tconst run = (body, direction, apple) => {\n\n\n    const evaluateHeadMove = (snake, direction, apple) => {\n      count+=1;\n      let headi = snake[0][0]\n      let headk = snake[0][1]\n      let headString = JSON.stringify(snake[0])\n      let appleString = JSON.stringify(apple)\n      let snakeBodyString = JSON.stringify(snake.slice(1))\n\n      if (count <= 10) {\n        // snake = snake\n      } else if (snakeBodyString.includes(headString)) {\n        snake = 0\n\n      } else if (direction === 'up' && headString == appleString) {\n        snake.unshift([headi - 1, headk])\n      } else if (direction === 'down' && headString == appleString) {\n        snake.unshift([headi + 1, headk])\n      } else if (direction === 'right' && headString == appleString) {\n        snake.unshift([headi, headk + 1])\n      } else if (direction === 'left' && headString == appleString) {\n        snake.unshift([headi, headk - 1])\n\n      } else if (direction === 'up' && initialTable[headi - 1][headk] === 0) {\n        snake.unshift([headi - 1, headk])\n        snake.pop()\n      } else if (direction === 'down' && initialTable[headi + 1][headk] === 0) {\n        snake.unshift([headi + 1, headk])\n        snake.pop()\n      } else if (direction === 'right' && initialTable[headi][headk + 1] === 0) {\n        snake.unshift([headi, headk + 1])\n        snake.pop()\n      } else if (direction === 'left' && initialTable[headi][headk - 1] === 0) {\n        snake.unshift([headi, headk - 1])\n        snake.pop()\n\n      } else if (direction === 'up' && initialTable[headi - 1][headk] === 2) {\n        snake = 0\n      } else if (direction === 'down' && initialTable[headi + 1][headk] === 2) {\n        snake = 0\n      } else if (direction === 'right' && initialTable[headi][headk + 1] === 2) {\n        snake = 0\n      } else if (direction === 'left' && initialTable[headi][headk - 1] === 2) {\n        snake = 0\n\n      } \n      return snake\n    }\n\n    const renderSnake = (body, direction, table, apple) => {\n\t\t  let newTable = JSON.parse(JSON.stringify(table))\n      let bodyToRender = evaluateHeadMove(body, direction, apple)\n\n      if (count <=10) {\n        newTable = initialTable\n      } else if (bodyToRender == 0) {\n        bodyToRender = 0\n      } else {\n        for (let coordinates of bodyToRender) {\n          let [i, k] = coordinates\n          newTable[i][k] = 1\n        }\n        let [i, k] = apple\n        newTable[i][k] = 3\n      }\n      return [newTable, bodyToRender]\n    }\n\n    return renderSnake(body, direction, initialTable, apple)\n\t}\n\treturn [run]\n}\n\nexport default useRunAlgorithm;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}